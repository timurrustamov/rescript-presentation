/*
 * Please name our Pokémon 👍 !
 *
 * Declare a variable playerName
 */
let playerName = "Pikachu";

//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................

/*
 * Now, let's display our pokemon level !
 *
 * Define a playerLevel int variable
 */
let playerLevel: int = 10 * 2;

//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................

/*
 * We need to display a start message now 🙈
 *
 * Please define getInitialBattleMessage with following signature ->
 *  (enemyName: string, isEnemyEvil: boolean): string
 */
let getInitialBattleMessage = (enemyName, isEnemyEvil) => {
  let enemyName =
    if (isEnemyEvil) {
      "Evil " ++ enemyName;
    } else {
      enemyName;
    };

  "Beware, a wild " ++ enemyName ++ " appears !";
};

//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................

/*
 * Whaaat, attacks do no damage ?!!
 * It's time to calculate how damage works 💪
 * > Well, sometimes the attack misses you know ;)
 *
 * Define getHpAfterDamage function with following signature ->
 *  (~currentHp: int, ~damage: option<int>): number
 */
let getHpAfterDamage = (~currentHp, ~damage) => {
  switch (damage) {
  | Some(damage) => currentHp - damage
  | None => currentHp
  };
};

//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................

/*
 * How come we can not choose an attack ?
 * We need to implement a way to move our cursor 🤔
 *
 * Our possibilities are: Up, Right, Down and Left
 *
 * Implement getNextCursorPosition function with following signature
 *  (currentAttackIndex: int, moveType: 'variant): int
 */
type moveType =
  | Up
  | Right
  | Down
  | Left;

let getNextCursorPosition = (currentAttackIndex, moveType) => {
  Js.log(currentAttackIndex);
  Js.log(moveType);
  switch (moveType) {
  | Up => currentAttackIndex + 2
  | Right => currentAttackIndex + 1
  | Down => currentAttackIndex - 2
  | Left => currentAttackIndex - 1
  };
};

//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................
//............................

/*
 * Pokémon games are so much fun, and have so many different pokémons
 * We need to account for little pokémon types that we have defined
 * Supported types are Electric ⚡️, Water 💦, Psychic 💆‍♀️ and Normal 💪
 *
 * Please define getDamageMultiplier function with following signature
 *  (attackType: pokemonType, defenceType: pokemonType): float
 */
type pokemonType =
  | Electric
  | Water
  | Psychic
  | Normal;

let getDamageMultiplier = (~attackType, ~defenceType) => {
  switch (attackType, defenceType) {
  | (Electric, Water)
  | (Water, Electric) => 2.0
  | (Water, Water)
  | (Psychic, Psychic)
  | (Electric, Electric) => 0.5
  | (_, _) => 1.0
  };
};
