// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");

var playerLevel = 20.0 * 2.0;

function getInitialBattleMessage(enemyName, isEnemyEvil) {
  var enemyName$1 = isEnemyEvil ? "Evil " + enemyName : enemyName;
  return "A wild " + (enemyName$1 + " appeared !");
}

function getNextCursorPosition(currentAttackIndex, moveType) {
  switch (moveType) {
    case /* Up */0 :
        return currentAttackIndex + 2 | 0;
    case /* Right */1 :
        return currentAttackIndex + 1 | 0;
    case /* Down */2 :
        return currentAttackIndex - 2 | 0;
    case /* Left */3 :
        return currentAttackIndex - 1 | 0;
    
  }
}

function getHpAfterDamage(currentHp, damage) {
  if (damage !== undefined) {
    return currentHp - damage | 0;
  } else {
    return currentHp;
  }
}

function getDamageMultiplier(attackType, defenceType) {
  var sametype = attackType === defenceType;
  if (attackType !== 0) {
    if (sametype) {
      return 0.5;
    } else {
      return 1.0;
    }
  } else if (defenceType !== 1) {
    if (sametype) {
      return 0.5;
    } else {
      return 1.0;
    }
  } else {
    return 2.0;
  }
}

function Demo$GameOver(Props) {
  var className = Props.className;
  var restart = Props.restart;
  var children = Props.children;
  return React.createElement("div", {
              className: className
            }, React.createElement("span", undefined, children), React.createElement("button", {
                  onClick: restart
                }, "Restart"));
}

var GameOver = {
  make: Demo$GameOver
};

var playerName = "Pikachu";

exports.playerName = playerName;
exports.playerLevel = playerLevel;
exports.getInitialBattleMessage = getInitialBattleMessage;
exports.getNextCursorPosition = getNextCursorPosition;
exports.getHpAfterDamage = getHpAfterDamage;
exports.getDamageMultiplier = getDamageMultiplier;
exports.GameOver = GameOver;
/* react Not a pure module */
